generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String   @unique
  password      String
  points        Int
  pointsExpired DateTime
  referralCode  String   @unique
  role          String
  isDeleted     Boolean
  isVerified    Boolean
  createdAt     DateTime @default(now())
  updateAt      DateTime @updatedAt

  pictureId String

  userReward   UserReward[]
  userReferral ReferralHistory?  @relation("Referral_toUser")
  userReferred ReferralHistory[] @relation("Referred_toUser")
  voucher      Voucher[]
  userVoucher  UserVoucher[]
  review       Review[]
  transaction  Transaction[]

  event   Event   @relation(references: [userId],fields: [eventId])

  @@map("user")
}

model UserReward {
  id        Int      @id @default(autoincrement())
  isUsed    Boolean
  expiredAt DateTime
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  rewardId Int
  userId   Int

  userReward TransactionUserReward[]

  reward Reward @relation(references: [id], fields: [rewardId])
  user   User   @relation(references: [id], fields: [userId])

  @@map("user_reward")
}

model Reward {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  percentage  Int
  max_nominal Int
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt

  userReward UserReward[]

  @@map("reward")
}

model ReferralHistory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  referralId Int? @unique
  referredId Int? @unique

  userReferralId User? @relation("Referral_toUser", references: [id], fields: [referralId])
  userReferredId User? @relation("Referred_toUser", references: [id], fields: [referredId])

  @@map("referral_history")
}

model Voucher {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  nominal   Int
  limit     Int
  isClaim   Boolean
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  userId  Int
  eventId Int

  userVoucher UserVoucher[]

  event Event @relation(references: [id], fields: [eventId])
  user  User  @relation(references: [id], fields: [userId])

  @@map("voucher")
}

model UserVoucher {
  id        Int      @id @default(autoincrement())
  isUsed    Boolean
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  userId    Int
  voucherId Int

  transactionUserVoucher TransactionUserVoucher[]

  user    User    @relation(references: [id], fields: [userId])
  voucher Voucher @relation(references: [id], fields: [voucherId])

  @@map("user_voucher")
}

model Transaction {
  id           Int      @id @default(autoincrement())
  uuid         Int      @unique
  status       String
  qty          Int
  paymentProof String
  total        Int
  pointUsed    Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  eventId Int
  userId  Int

  transactionUserVoucher TransactionUserVoucher[]
  transactionDiscount    TransactionDiscount[]
  transactionUserReward  TransactionUserReward[]

  event Event @relation(references: [id], fields: [eventId])
  user  User  @relation(references: [id], fields: [userId])

  @@map("transaction")
}

model TransactionDiscount {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  discountId    Int
  transactionId Int

  discount    Discount    @relation(references: [id], fields: [discountId])
  transaction Transaction @relation(references: [id], fields: [transactionId])

  @@map("transaction_discount")
}

model TransactionUserVoucher {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userVoucherId Int
  transactionId Int

  userVoucher UserVoucher @relation(references: [id], fields: [userVoucherId])
  transaction Transaction @relation(references: [id], fields: [transactionId])

  @@map("transaction_user_voucher")
}

model TransactionUserReward {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userRewardId  Int
  transactionId Int

  userReward  UserReward  @relation(references: [id], fields: [userRewardId])
  transaction Transaction @relation(references: [id], fields: [transactionId])

  @@map("transaction_user_reward")
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  review    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eventId Int
  userId  Int

  event Event @relation(references: [id], fields: [eventId])
  user  User  @relation(references: [id], fields: [userId])

  @@map("review")
}

model Discount {
  id         Int      @id @default(autoincrement())
  percentage Int
  isActive   Boolean
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  eventId Int

  transactionDiscount TransactionDiscount[]

  event Event @relation(references: [id], fields: [eventId])

  @@map("discount")
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  price       Int
  limit       Int
  booked      Int
  thumbnail   String
  startDate   DateTime @default(now())
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  locationId Int

  review        Review[]
  transaction   Transaction[]
  eventCategory EventCategory[]
  voucher       Voucher[]
  discount      Discount[]
  user          User[]

  location Location @relation(references: [id], fields: [locationId])

  @@map("event")
}

model EventCategory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categoryId Int
  eventId    Int

  category Category @relation(references: [id], fields: [categoryId])
  event    Event    @relation(references: [id], fields: [eventId])

  @@map("event_category")
}

model Category {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  isDeleted   Boolean
  createdAt   DateTime
  updatedAt   DateTime

  eventCategory EventCategory[]

  @@map("category")
}

model Location {
  id        Int      @id @default(autoincrement())
  city      String
  country   String
  createdAt DateTime

  event Event[]

  @@map("location")
}
